{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/QuestionSettings.styles.ts","components/QuestionSettings.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","SettingsWrapper","InputWrapper","isPlaying","SelectionWrapper","QuestionSettings","getQuestions","getDifficulty","onChange","e","target","type","min","max","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","setTotalQuestions","NULL","setDifficulty","setIsPlaying","showScore","setShowScore","showTable","setShowTable","showWarn","setShowWarn","startTrivia","setTimeout","newQuestions","useEffect","length","href","rel","src","alt","undefined","currentTarget","prev","answerObject","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da9bba69.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  NULL = \"\",\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};\r\n","export const shuffleArray = (array: any[]) =>[...array].sort(() => Math.random() - 0.5);\r\n  ","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background-color: #66b3ff;\r\n    border-radius: 10px;\r\n    border: 2px solid #66b3ff;\r\n    padding: 15px 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n    margin-bottom: 12px;\r\n    box-shadow: 0 14px 18px 0 rgba(0, 0, 0, 0.2), 0 16px 30px 0 rgba(0, 0, 0, 0.19);\r\n\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n\r\n    .number{\r\n        background-image: radial-gradient(#1a8cff 30%, #1a75ff 70%);\r\n        border-radius: 6px;\r\n        padding: 8px 4px;\r\n        width: 200px;\r\n        margin: 0 auto;\r\n        color: #000;\r\n    }\r\n\r\n    .question{\r\n        color: #000;\r\n        font-weight: 400;\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n        correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #33c2ff, #99e0ff)'};\r\n        border: none;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #000;\r\n    font-weight: 400;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    }\r\n`;","import React from 'react';\r\n// Types\r\nimport { AnswerObject } from '../App';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className='number'>\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p className='question' dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SettingsWrapper = styled.div`\r\n    \r\n    background-color: #1a75ff;\r\n    border-radius: 10px;\r\n    padding: 12px 24px;\r\n    margin-top: 12px;\r\n\r\n    .input-style{\r\n        display: flex;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .selection-style{\r\n        display: flex;\r\n    }\r\n\r\n    .input-style span, .selection-style span{\r\n        color: #f4f4f4;\r\n        font-weight: bold;\r\n        font-size: 1rem;\r\n        margin-right: 6px;\r\n        display: inline-block;\r\n        width: 170px;\r\n    }\r\n\r\n    @media all and (max-width: 768px) {\r\n        padding: 8px 18px;\r\n        .input-style span{\r\n          font-size: 16px;\r\n          margin-right: 0px;\r\n        }\r\n    \r\n        .selection-style span{\r\n          font-size: 16px;\r\n          margin-right: 0px;\r\n        }\r\n      }\r\n`;\r\n\r\ntype WrapperProps = {\r\n    isPlaying: boolean;\r\n};\r\n\r\nexport const InputWrapper = styled.div<WrapperProps>`\r\n    transition: all 0.3s ease;\r\n    input{\r\n        background-color: ${({isPlaying}) => isPlaying ? \"#e6e6e6\": \"#fff\"};\r\n        outline: none;\r\n        border: none;\r\n        padding: 4px 8px;\r\n        margin: 0 4px;\r\n        border-radius: 4px;\r\n        width: 80px;\r\n        text-align: center;\r\n        color: #66a3ff;\r\n        font-weight: bold;\r\n\r\n    }\r\n`;\r\n\r\nexport  const SelectionWrapper = styled.div<WrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    select{\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n        background-color: ${({isPlaying}) => isPlaying ? \"#e6e6e6\": \"#fff\"};;\r\n        border: none;\r\n        padding: 4px 18px !important;\r\n        margin: 0 4px;\r\n        width: 80px;\r\n        cursor: inherit;\r\n        outline: none;\r\n        border-radius: 4px;\r\n        color: #66a3ff;\r\n        font-weight: bold;\r\n        text-align: center;\r\n    }\r\n\r\n    select::-ms-expand {\r\n        display: none;\r\n    }\r\n\r\n    \r\n`;","import React from 'react';\r\nimport { Difficulty } from \"../API\";\r\nimport { SettingsWrapper, InputWrapper, SelectionWrapper } from './QuestionSettings.styles';\r\n\r\ntype Props = {\r\n    getQuestions: (e: React.MouseEvent<HTMLInputElement>) => void;\r\n    getDifficulty: (e: Difficulty) => void;\r\n    isPlaying: boolean;\r\n}\r\n\r\n\r\nconst QuestionSettings: React.FC<Props> = ({getQuestions, getDifficulty, isPlaying}) => {\r\n    \r\n    return(\r\n        <SettingsWrapper>\r\n            <div className=\"input-style\">\r\n                <span>No. of Questions (Max: 50)</span> \r\n                <InputWrapper isPlaying={isPlaying}>\r\n                    <input onChange={(e: any) => {getQuestions(e.target.value);}} disabled={isPlaying} type=\"number\" min=\"1\" max=\"50\"/>\r\n                </InputWrapper>\r\n            </div>\r\n            <div className=\"selection-style\">\r\n                <span>Difficulty</span> \r\n                <SelectionWrapper isPlaying={isPlaying}>\r\n                    <select onChange={(e: any) => {getDifficulty(e.target.value);}} disabled={isPlaying}>\r\n                        <option>--Select--</option>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n  \r\n                </SelectionWrapper>\r\n            </div>\r\n        </SettingsWrapper>\r\n    );\r\n}\r\n\r\nexport default QuestionSettings;","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  \r\n\r\n  body {\r\n    background: url(bg-image2.jpg);\r\n    background-repeat: no-repeat;\r\n    -webkit-background-size: cover;\r\n    -moz-background-size: cover;\r\n    -o-background-size: cover;\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    font-family: 'Ubuntu Condensed', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  \r\n\r\n  .show-warn, .hide-warn{\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: #ccc;\r\n    width: 400px;\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    padding: 12px 0;\r\n    border-radius: 6px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: top 1s ease;\r\n  }\r\n\r\n  .show-warn{\r\n    top: 8px;\r\n  }\r\n  \r\n  .hide-warn{\r\n    top: -300px;\r\n  }\r\n\r\n  .show-warn p, .hide-warn p{\r\n    text-align: center;\r\n    margin-left: 6px;\r\n    font-size: 18px;\r\n  }\r\n\r\n  .show-warn img, .hide-warn img{\r\n    width: 25px;  \r\n  }\r\n\r\n\r\n  h5{\r\n    margin: 0;\r\n    margin-bottom: 10px;\r\n    color: blue;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 1rem;\r\n    margin: 0;\r\n    background-color: #1a75ff;\r\n    padding: 6px 12px;\r\n    margin: 12px;\r\n    border-radius: 6px;\r\n  }\r\n\r\n  h4 {\r\n    font-family: 'Ubuntu Condensed', sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 500;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 30px;\r\n    text-align: center;\r\n    margin: 0;\r\n    margin-top: 10px;\r\n    width: 100%;\r\n    color: #333300;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ccffcc, #00cc00);\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    padding: 0 40px;\r\n    border: 1px solid #1aff1a;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n    margin: 15px 0;\r\n  }\r\n\r\n\r\n  .loading{\r\n    width: 30px;\r\n    height: auto;\r\n  }\r\n\r\n  @media all and (max-width: 768px) {\r\n    .show-warn, .hide-warn{\r\n      width: 90%;\r\n    }\r\n\r\n    .show-warn p, .hide-warn p{\r\n      font-size: 16px;\r\n    }\r\n  }\r\n\r\n  @media all and (max-width: 480px) {\r\n    .show-warn, .hide-warn{\r\n      width: 95%;\r\n    }\r\n\r\n    .show-warn p, .hide-warn p{\r\n      font-size: 14px;\r\n    }\r\n\r\n    .show-warn img, .hide-warn img{\r\n      width: 20px;  \r\n    }\r\n  \r\n  }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\nimport QuestionSettings from './components/QuestionSettings';\n// types\nimport { QuestionsState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [difficulty, setDifficulty] = useState(Difficulty.NULL);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showScore, setShowScore] = useState(false);\n  const [showTable, setShowTable] = useState(false);\n  const [showWarn, setShowWarn] = useState(false);\n\n  const startTrivia = async () => {\n    if(totalQuestions < 1 || difficulty === \"\"){\n      setShowWarn(true);\n      setTimeout(function(){\n        setShowWarn(false);\n      }, 2500);\n      return;\n    }\n    setLoading(true);\n    setGameOver(false);\n    setIsPlaying(true);\n    setShowScore(false);\n    setShowTable(false);\n   \n    const newQuestions = await fetchQuizQuestions(\n      totalQuestions,\n      difficulty\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n    setShowScore(true);\n    setShowTable(true);\n   \n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n\n    if(userAnswers.length + 1 === totalQuestions){\n      setGameOver(true);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n    if (nextQ === totalQuestions) {\n      setGameOver(true);\n      setIsPlaying(false);\n    } else {\n      setNumber(nextQ);\n    }\n\n  };\n\n  const getQuestions = (questions: any) => {\n    setTotalQuestions(questions);\n  };\n\n  const getDifficulty = (difficulty: Difficulty) => {\n    setDifficulty(difficulty);\n  };\n\n  useEffect(function(){\n    if(number == totalQuestions || userAnswers.length == totalQuestions){\n      setGameOver(true);\n      setIsPlaying(false);\n    }\n  }, [number, userAnswers, totalQuestions]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h4>General Knowledge Quiz</h4>\n        <h5><a href=\"https://github.com/OkekeChristian24/quiz-app-tsx\" target=\"_blank\" rel=\"noreferrer noopener\">By Okeke Christian</a> </h5>\n        <div className={showWarn ? \"show-warn\" : \"hide-warn\"}>\n          <img src=\"./stop-icon.png\" alt=\"Stop icon\"/>\n          <p> Please set the no. of questions and difficulty level</p>\n        </div>\n        <QuestionSettings getQuestions={getQuestions} getDifficulty={getDifficulty} isPlaying={isPlaying} />\n        {gameOver || userAnswers.length === totalQuestions ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {showScore ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p><img className=\"loading\" src=\"./spinner.gif\" alt=\"Loading image\" /></p> : null}\n        {!loading && showTable && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={totalQuestions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== totalQuestions - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}